- USANDO LINPROG PARA ACHAR SOLUÇÃO ÓTIMA:
{
import numpy as np
import matplotlib.pyplot as plt
import control as co
import ipdb
from scipy.optimize import linprog
import math
# Forma certa de conseguir infinito positivo e negativo
InfPos = math.inf
InfNeg = 0 - infpos
# EQ DE OBJETIVO em formato MIN
c = [3, 2]
# COEF DAS VARIAVEIS DAS INEQUAÇÕES (<=)
Aup = [[-2, -1], [-6, -1], [-1, -3]]
# CTEs DAS INEQUAÇÕES (<=)
bup = [-8, -12, -9]
# COEF DAS VARIAVEIS DE EQUAÇÕES (=)
# Aeq = [[1, 1], [1, 1]]
# CTEs DAS EQUAÇÕES (=)
# beq = [1, 1]
# Limites de cada variável, primeiro o LB e depois o UB
lim_x1 = (0, 99999999999999)
lim_x2 = (0, 99999999999999)
# Definição do LINPROG
res = linprog(c, A_ub=Aup, b_ub=bup,A_eq=None, b_eq=None, bounds=[lim_x1, lim_x2], method='highs')
print(res)
# if(success == True)
#    print('Deu bom!')
# x: é o valor das variáveis
# fun: é o valor de c (z) em seu Min
}

- Plotagem e Solução por Algoritmo Genético
{
import numpy as np
import matplotlib.pyplot as plt
import control as co
import ipdb
from scipy.optimize import linprog
import math
# !pip install geneticalgorithm
# Para MINIMIZAR: Z = x∗sin(4πx)−y∗sin(4πy+π)+1
# s.a. −1≤x≤2 e −1≤y≤2
def f(x):
  X = x[0]
  Y = x[1]
  if X > 2 or X < -1 or Y > 2 or Y < -1:
    return 1000000 # Como o problema procura minimizar, quando uma valor quebrar as restrições é só adicionar um valor alto para ela.
  else:
    Valor = X*np.sin(4 * np.pi * X) - Y * np.sin( 4 * np.pi * Y + np.pi) + 1

    return Valor

from geneticalgorithm import geneticalgorithm as ga

#Parametros do Sistema:

problem_size = 2                    # Dimensão do Problema
epoch = 20                          # Número de Gerações que o problema irá executar
pop_size = 1000                     # Número de Indivíduos da Populaçao Inicial
pc = 0.95                           # Probabilidade de Crossover
pm = 0.025                          # Probabilidade de Mutação
obj_func = f                        #Função de Aptidão
varbound=np.array([[-1,2],[-1,2]])  #Limite máximo e minimo da população

algorithm_param = {'max_num_iteration': epoch,\
                   'population_size':pop_size,\
                   'mutation_probability':pm,\
                   'elit_ratio': 0.01,\
                   'crossover_probability': pc,\
                   'parents_portion': 0.3,\
                   'crossover_type':'uniform',\
                   'max_iteration_without_improv':None}


model=ga(function=obj_func,dimension=problem_size,variable_type='real',variable_boundaries=varbound,algorithm_parameters=algorithm_param)
model.run()
}

- DEFINIÇÃO DE FUNÇÃO f(x, y), SUAS DERIVADAS E SUBSTITUIÇÃO DAS VARIÁVEIS POR VALORES
{
import numpy
import sympy as sym

# Definindo as variáveis do problema
x, y = sym.symbols('x y')
# Definindo a função f(x, y)
f = x**2 + 3*y**2 + 2*x*y
# Derivada parcial df/dx
df_dx = sym.diff(f, x)
print(df_dx)
# Derivada parcial df/dy
df_dy = sym.diff(f, y)
# Criando valor para avaliar valor de f' para um valor de x
df_dx_num = sym.lambdify((x, y),df_dx,"numpy")
# Printando valor de df/dx sendo avaliada para x=1 e y=1
print(df_dx_num(1, 1))
}

- DESCOBRIR RAIZ DE FUNÇÃO NÃO LINEAR POR MÉTODO DE NEWTON PARA 1 VARIAVEL f(x) - SE VC QUER MAX OU MIN TEM Q FAZER ISSO PRA DERIVADA DELA
{
# Nome: Caio Sergio Pereira da Fonseca
# Matricula: 202169001B
# SOLUÇÃO DO PROBLEMA NÃO LINEAR COM 1 VARIÁVEL INDEPENDENTE
import numpy
import math
import sympy as sym
import time
import matplotlib as plt
import matplotlib.pyplot as plot

# Inicializando um timer para medir o tempo que demora para executar este código
start = time.time()


# Definindo as variáveis do problema
x = sym.symbols('x')
# Definindo a função f(x)
f = -1.5*x**6 - 2*x**4 + 12*x
# Criando local para avaliar valor de f para um valor de x
f_num = sym.lambdify((x), f, "numpy")
# Derivada df/dx
df_dx = sym.diff(f, x)
# Criando local para avaliar valor de f' para um valor de x
df_dx_num = sym.lambdify((x), df_dx, "numpy")


# Definindo tolerância do método de Newton
tolerancia = 10**(-10)
# Definindo valor do chute inicial de x
x_num = 1
# Contador de iterações
h = 0
# Definição do Erro Inicial e módulo de seu valor
erro = 0 - f_num(x_num)
if erro < 0:
    erro = erro * (-1)


# Criando um vetor que será expandido pelos vetores de erro
vetor = numpy.array([erro])

# Procura do valor de "x" mais próximo da raiz da função dentro de uma tolerância
while erro > tolerancia:
    # Passo de convergência com f' com um valor de "x" e erro
    delta_x = erro / df_dx_num(x_num)

    # Atualização do valor de "x" para um mais adequado
    x_num = x_num + delta_x

    # Atualização do erro na procura pela raiz com o novo valor de "x"
    erro = 0 - f_num(x_num)
    if erro < 0:
        erro = erro * (-1)
    
    # Contagem de +1 iteração
    h = h + 1

    # Vetor 1x1 onde serão salvos os valores dos erros de acordo com a iteração
    erro_vetor = numpy.array([erro])
    # Aumento do "vetor" com o novo valor do erro
    vetor = numpy.insert(vetor, h, erro_vetor, axis=None)

# Finalizando o timer
end = time.time()

# a) e c)
print('Para que f(x*) = 0 temos que, aproximadamente, x* = {}!'.format(x_num))
print('O erro nessa aproximação, ou seja, o valor real de f(x*) é {}!'.format(erro))
print('Foram necessárias {} iterações pra adquirir esses resultados!'.format(h))
print('Este código foi executado em {:.5f} segundo(s)!'.format(end - start))

# Se eu quisesse plotar a função f de -50 a +50
# sym.plot(f, (x, -50, 50))

# b)
# Plotar o valor do erro para cada iteração
plot.plot(vetor)
plot.show()

# d)
a = 0
b = 0
# Procurar a derivada de maior ordem de f
while df_dx_num(x_num) != 0:
    df_dx = sym.diff(df_dx, x)
    df_dx_num = sym.lambdify((x), df_dx, "numpy")
    a = a + 1

# Agora o "a" tem o valor do numero de derivadas necessárias para achar uma constante
# Caso "a" seja ímpar:
if a % 2 == 1:
    print('x* se apresenta em um ponto de inflexão!')
# E se "a" for par:
else:
    while b != (a-1):
        df_dx = sym.diff(df_dx, x)
        # Criando local para avaliar valor de f' para um valor de x
        df_dx_num = sym.lambdify((x), df_dx, "numpy")
        b = b + 1
    # E agora para decobrir e é max ou min
    if df_dx_num(x_num) > 0:
        print('x* se apresenta no ponto mínimo da função!')
    else:
        print('x* se apresenta no ponto máximo da função!')
}

- DESCOBRIR RAIZ DE FUNÇÃO NÃO LINEAR POR MÉTODO DE NEWTON PARA 3 VARIAVEIS f(x, y) com 1 restrição  - SE VC QUER MAX OU MIN TEM Q FAZER ISSO PRA DERIVADA DELA
{
# Nome: Caio Sergio Pereira da Fonseca
# Matricula: 202169001B
# SOLUÇÃO DO PROBLEMA NÃO LINEAR COM 2 VARIÁVEIS INDEPENDENTES
import numpy
import math
import sympy as sym
import matplotlib as plt
import matplotlib.pyplot as plot
import time
from sympy.utilities.iterables import flatten
from sympy.plotting import plot3d

# Inicializando um timer para medir o tempo que demora para executar este código
start = time.time()


# Definindo as variáveis do problema
x, y, z = sym.symbols('x y z')

# Definindo a função f(x) modificada pela restrição (Lagrangeana)
# a)
f = 100*(y - x**2)**2 + (1 - x)**2 + z*1.5 - z*x**2 - z*y**2
# Criando local para avaliar valor de f para um valor de x, y, z
f_num = sym.lambdify((x, y, z), f, "numpy")

# Para a formação do vetor de erros:
# Derivada df/dx
df_dx = sym.diff(f, x)
df_dx_num = sym.lambdify((x, y, z), df_dx, "numpy")

# Derivada df/dy
df_dy = sym.diff(f, y)
df_dy_num = sym.lambdify((x, y, z), df_dy, "numpy")

# Derivada df/dz
df_dz = sym.diff(f, z)
df_dz_num = sym.lambdify((x, y, z), df_dz, "numpy")

# Para formação da matriz hessiana:
# c)
hess = sym.hessian(f, (x, y, z))
hess_num = sym.lambdify((x, y, z), hess, "numpy")


# Definindo tolerância do método de Newton
tolerancia = 10**(-10)
# Definindo valor do chute inicial de x, y, z
x_num = 1
# Criando vetor para facilitar o manejo dos valores de x, y, z
x_num_array = numpy.array([x_num, x_num, x_num])

# Contador de iterações
h = 0

# Criação de algumas variáveis úteis para o erro
# *flatten é necessário pois transforma de um vetor para uma lista
a = 0-df_dx_num(*flatten(x_num_array))
b = 0-df_dy_num(*flatten(x_num_array))
c = 0-df_dz_num(*flatten(x_num_array))

# Definição do vetor do Erro Inicial
# b)
erro_vetor = numpy.matrix([[a], [b], [c]])

# Definição do vetor erro com módulo de seus valores
if a < 0:
    a = a * (-1)
if b < 0:
    b = b * (-1)
if c < 0:
    c = c * (-1)
erro_vetor_mod = numpy.matrix([[a], [b], [c]])

# Criando um vetor que será expandido pelos vetores de erro
vetor = numpy.array([f_num(*flatten(x_num_array))])

# Procura do valor de "x, y, z" mais próximos da raiz da função dentro de uma tolerância
# Pegamos a localização do elemento de maior valor pelo .argmax() do erro_vetor e então comparamos este valor com a tolerância
while erro_vetor_mod.item(erro_vetor_mod.argmax()) > tolerancia:
    # Passo de convergência com f' com um valor de "x, y, z" e erro
    # x_num_array vira lista, é utilizado em hess_num, é convertido para matrix de um ndarray e multiplicado pelo erro_vetor
    delta_x = numpy.asmatrix(
        hess_num(*flatten(x_num_array))).getI() * erro_vetor

    # Atualização do valor de "x, y, z" para mais adequados
    x_num_array = x_num_array + delta_x.getT()

    # Atualização do erro na procura pela raiz com o novo valor de "x, y, z"
    # x_num_array é transformado de matrix para array e depois para uma lista
    x_num_array = numpy.asarray(x_num_array).ravel()

    a = 0-df_dx_num(*flatten(x_num_array))
    b = 0-df_dy_num(*flatten(x_num_array))
    c = 0-df_dz_num(*flatten(x_num_array))

    # Atualização do Erro
    erro_vetor = numpy.matrix([[a], [b], [c]])

    # Vetor com módulo dos valores do erro atualizado
    if a < 0:
        a = a * (-1)
    if b < 0:
        b = b * (-1)
    if c < 0:
        c = c * (-1)
    erro_vetor_mod = numpy.matrix([[a], [b], [c]])

    # Contagem de +1 iteração
    h = h + 1
    
    # Vetor 1x1 onde serão salvos os valores dos erros de acordo com a iteração
    erro = numpy.array([f_num(*flatten(x_num_array))])
    # Aumento do "vetor" com o novo valor do erro
    vetor = numpy.insert(vetor, h, erro, axis=None)

# Finalizando o timer
end = time.time()

# a) e c) e d)
print('Para que f(x*, y*, z*) = 0 temos que, aproximadamente:')

print(' x* = {}!\n y* = {}!\n z* = {}!'.format(x_num_array.item(0),
      x_num_array.item(1), x_num_array.item(2)))

print('O erro nessa aproximação, ou seja, o valor real de f(x*, y*, z*) é {}!'.format(f_num(*flatten(x_num_array))))

print('Foram necessárias {} iterações pra adquirir esses resultados!'.format(h))

print('Este código foi executado em {:.5f} segundo(s)!'.format(end - start))

# Se eu quisesse plotar a função f de -1 a +1 para x e y
# f)
f = 100*(y - x**2)**2 + (1 - x)**2
plot3d(f, (x, -1, 1), (y, -1, 1))

# Plotar o valor do erro para cada iteração
# e)
plot.plot(vetor)
plot.show()
}
